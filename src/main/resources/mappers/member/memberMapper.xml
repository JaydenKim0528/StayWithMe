<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.swm.member.model.mapper.MemberMapper">

    <resultMap id="userResultMap" type="kr.co.swm.member.model.dto.UserDTO">
        <result column="USER_ID" property="userId"></result>
        <result column="USER_PWD" property="userPwd"></result>
        <result column="ROLES" property="role"></result>
        <result column="USER_NO" property="no"></result>
        <result column="USER_NAME" property="userName"></result>
        <result column="USER_PHONE" property="userPhone"></result>
        <result column="CREATED_DATE" property="createdDate"></result>
        <result column="DELETED_DATE" property="deletedDate"></result>
        <result column="LAST_LOGIN_DATE" property="lastLoginDate"></result>
        <result column="LOG_ID" property="logId"></result>
        <result column="USER_IP" property="userIp"></result>
        <result column="STATUS" property="userStatus"></result>
        <result column="WITHDRAWAL_REASON" property="withdrawalReason"></result>
    </resultMap>

    <!--회원가입 insert-->
    <insert id="setSignUp" >
        INSERT INTO USER (USER_ID, USER_PWD, USER_NAME, USER_PHONE, CREATED_DATE, DELETED_DATE)
        VALUES (#{userDTO.userId}, #{userDTO.userPwd}, #{userDTO.userName}, #{userDTO.userPhone}, #{userDTO.createdDate}, #{userDTO.deletedDate})
    </insert>

    <!--중복아이디-->
    <select id="idCheck">
        SELECT count(*) FROM USER
        WHERE USER_ID = #{userId}
    </select>

    <!--아이디 찾기-->
    <select id="findUserId" resultType="String">
        SELECT USER_ID FROM USER
        WHERE USER_NAME = #{userName} AND USER_PHONE = #{userPhone}
    </select>

    <!--비밀번호 찾기에서 사용자 검증-->
    <select id="verifyUser" resultType="String">
        SELECT USER_ID, USER_PWD FROM USER
        WHERE USER_ID = #{userId} AND USER_PHONE = #{userPhone}
    </select>

    <!--임시비밀번호 인코딩 업데이트-->
    <update id="updateResetPassword">
        UPDATE USER
        SET USER_PWD = #{encodedPassword}
        WHERE user_id = #{userId} AND user_phone = #{userPhone}
    </update>

    <!--로그가 없다면 새로운 로그 삽입-->
    <insert id="insertLoginLog">
        INSERT INTO USER_LOG (USER_NO, LAST_LOGIN_DATE, USER_IP)
        VALUES (#{userDTO.no}, #{userDTO.lastLoginDate}, #{userDTO.userIp})
    </insert>

    <!--로그 조회-->
    <select id="getUserLogsByUserNo" resultMap="userResultMap">
        SELECT * FROM USER_LOG
        WHERE USER_NO = #{no}
        ORDER BY LAST_LOGIN_DATE DESC
    </select>

    <!--로그인한 유저의 전체 정보-->
    <select id="findByUserInfo" resultMap="userResultMap">
        SELECT * FROM USER
        WHERE USER_ID = #{userId}
    </select>

    <!--마이페이지 내정보수정 비밀번호 변경-->
    <update id="updatePassword">
        UPDATE USER
        SET USER_PWD = #{userDTO.userPwd}
        WHERE user_id = #{userDTO.userId}
    </update>

    <!--마이페이지 내정보수정 휴대전화 번호 변경-->
    <update id="updatePhoneNumber">
        UPDATE USER
        SET USER_PHONE = #{newPhone}
        WHERE USER_ID = #{userId}
    </update>

    <!--마이페이지 회원 탈퇴, 회원상태, 탈퇴사유 업데이트-->
    <update id="updateUserStatus">
        UPDATE USER
        SET STATUS = #{userDTO.userStatus}, WITHDRAWAL_REASON = #{userDTO.withdrawalReason}, DELETED_DATE = #{userDTO.deletedDate}
        WHERE USER_ID = #{userDTO.userId}
    </update>

    <!--회원상태 : DELETED 업데이트된 날자 기준 - 일주일뒤 삭제-->
    <delete id="deleteUser">
        DELETE FROM USER
        WHERE STATUS = 'DELETED'
            AND DELETED_DATE &lt;= #{oneWeekAgo}
        <!--
        현재 시간에서 1주일을 뺀 날짜를 나타내며, 이 날짜보다 이전인 데이터만 삭제
        DELETED_DATE가 oneWeekAgo보다 작은 데이터를 삭제 <=
        -->
    </delete>

</mapper>

