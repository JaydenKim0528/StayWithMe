<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.swm.board.mapper.ListMapper">
    <resultMap id="placeResultMap" type="kr.co.swm.board.list.model.DTO.ListDTO">
        <result column="ACCOMMODATION_ADMIN_NO" property="boardNo"></result>
        <result column="NAME" property="boardName"></result>
        <result column="ACCOMMODATION_TYPE" property="boardType"></result>
        <result column="ADDRESS" property="boardAddress"></result>
        <result column="CHECK_IN_TIME" property="boardCheckIn"></result>
        <result column="BASIC_RATE" property="boardCount"></result>
        <result column="CHECK_IN_DATE" property="checkInDate"></result>
        <result column="CHECK_OUT_DATE" property="checkOutDate"></result>
    </resultMap>


    <!-- 장소 -->
    <select id="getPlace" resultMap="placeResultMap">
        SELECT ab.ACCOMMODATION_ADMIN_NO,
        ab.NAME,
        ab.ACCOMMODATION_TYPE,
        ab.ADDRESS,
        r.CHECK_IN_TIME,
        MIN(br.BASIC_RATE) AS BASIC_RATE
        FROM (SELECT a.ACCOMMODATION_ADMIN_NO,
        a.NAME,
        a.ACCOMMODATION_TYPE,
        a.ADDRESS
        FROM facilities f
        JOIN accommodation a ON a.ACCOMMODATION_ADMIN_NO = f.ACCOMMODATION_ADMIN_NO
        <if test="searchDTO.options != null and searchDTO.options.size() > 0">
            WHERE f.FACILITY_NAME IN
            <foreach item="option" collection="searchDTO.options" open="(" separator="," close=")">
                #{option}
            </foreach>
        </if>
        ) ab
        JOIN room r ON ab.ACCOMMODATION_ADMIN_NO = r.ACCOMMODATION_ADMIN_NO
        JOIN basic_rate br ON r.ROOM_NO = br.ROOM_NO
        <if test='searchDTO.type != null and !searchDTO.type.equals("전체")'>
            WHERE ab.ACCOMMODATION_TYPE = #{searchDTO.type}
        </if>
        GROUP BY ab.ACCOMMODATION_ADMIN_NO, ab.NAME, ab.ACCOMMODATION_TYPE, ab.ADDRESS, r.CHECK_IN_TIME
        HAVING MIN(br.BASIC_RATE) BETWEEN #{searchDTO.minRate} AND #{searchDTO.maxRate}
        ORDER BY ab.ACCOMMODATION_ADMIN_NO
        LIMIT #{pi.boardLimit} OFFSET #{pi.offset}


    </select>


    <!-- 게시글의 총 개수 -->
    <select id="getTotalCount" resultType="int">
<!--        SELECT COUNT(*) FROM (-->
<!--            SELECT ab.NAME,-->
<!--                    ab.ACCOMMODATION_TYPE,-->
<!--                    ab.ADDRESS,-->
<!--                    r.CHECK_IN_TIME,-->
<!--                    MIN(br.BASIC_RATE)-->
<!--            FROM (SELECT a.ACCOMMODATION_ADMIN_NO,-->
<!--                        a.NAME,-->
<!--                        a.ACCOMMODATION_TYPE,-->
<!--                        a.ADDRESS-->
<!--                    FROM facilities f-->
<!--                    JOIN accommodation a ON a.ACCOMMODATION_ADMIN_NO = f.FACILITY_NO-->
<!--                    <if test="searchDTO.options != null and searchDTO.options.size() > 0">-->
<!--                        WHERE f.FACILITY_NAME IN-->
<!--                        <foreach item="option" collection="searchDTO.options" open="(" separator="," close=")">-->
<!--                            #{option}-->
<!--                        </foreach>-->
<!--                    </if>) ab-->
<!--            JOIN room r ON ab.ACCOMMODATION_ADMIN_NO = r.ACCOMMODATION_ADMIN_NO-->
<!--            JOIN basic_rate br ON r.ROOM_NO = br.ROOM_NO-->
<!--            <if test='!searchDTO.type.equals("전체")'>-->
<!--                WHERE ab.ACCOMMODATION_TYPE = #{searchDTO.type}-->
<!--            </if>-->
<!--            group by ab.name, ab.accommodation_Type, ab.ADDRESS, r.CHECK_IN_TIME, r.ACCOMMODATION_ADMIN_NO-->
<!--            HAVING (MIN(basic_rate) BETWEEN #{searchDTO.minRate} AND #{searchDTO.maxRate})-->
<!--    ) a-->

        SELECT COUNT(*)
        FROM (
        SELECT ab.NAME,
        ab.ACCOMMODATION_TYPE,
        ab.ADDRESS,
        r.CHECK_IN_TIME,
        MIN(br.BASIC_RATE) AS BASIC_RATE
        FROM (
        SELECT a.ACCOMMODATION_ADMIN_NO,
        a.NAME,
        a.ACCOMMODATION_TYPE,
        a.ADDRESS
        FROM facilities f
        JOIN accommodation a ON a.ACCOMMODATION_ADMIN_NO = f.ACCOMMODATION_ADMIN_NO
        <if test="searchDTO.options != null and searchDTO.options.size() > 0">
            WHERE f.FACILITY_NAME IN
            <foreach item="option" collection="searchDTO.options" open="(" separator="," close=")">
                #{option}
            </foreach>
        </if>
        ) ab
        JOIN room r ON ab.ACCOMMODATION_ADMIN_NO = r.ACCOMMODATION_ADMIN_NO
        JOIN basic_rate br ON r.ROOM_NO = br.ROOM_NO
        <if test="searchDTO.type != null and !searchDTO.type.equals('전체')">
            WHERE ab.ACCOMMODATION_TYPE = #{searchDTO.type}
        </if>
        GROUP BY ab.NAME, ab.ACCOMMODATION_TYPE, ab.ADDRESS, r.CHECK_IN_TIME
        HAVING MIN(br.BASIC_RATE) BETWEEN #{searchDTO.minRate} AND #{searchDTO.maxRate}
        ) a

<!--
    1. 유형만 검색했을 떄
    2. 가격만 검색했을 떄
    3. 옵션만 검색헀을 떄
    4. 전체 선택 후 검색했을 때
-->
    </select>

    <!-- 최저 기본 가격 -->
    <select id="getCost" resultMap="placeResultMap">
        select distinct basic_rate_no,basic_rate from BASIC_RATE
        where basic_rate_no = 1
    </select>

    <select id="getCheck" resultMap="placeResultMap">
        SELECT
        a.ACCOMMODATION_ADMIN_NO,
        a.name AS accommodation_name,
        a.accommodation_type,
        a.address,
        MIN(br.BASIC_RATE) AS minimum_basic_rate
        FROM
        accommodation a
        JOIN
        room r ON a.ACCOMMODATION_ADMIN_NO = r.ACCOMMODATION_ADMIN_NO
        JOIN
        BASIC_RATE br ON r.ROOM_NO = br.ROOM_NO
        LEFT JOIN
        RESERVE re ON r.ROOM_NO = re.ROOM_NO
        AND (
        (re.CHECK_IN_DATE <![CDATA[#{checkOutDate} AND re.CHECK_OUT_DATE > #{checkInDate})
        AND re.RESERVATION_STATUS != '예약완료'
        )
        WHERE
        re.ROOM_NO IS NULL  -- 예약이 없는 경우
        GROUP BY
        a.ACCOMMODATION_ADMIN_NO, a.name, a.accommodation_type, a.address;]]></select>

</mapper>
